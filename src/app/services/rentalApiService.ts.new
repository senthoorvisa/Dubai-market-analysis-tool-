// Type definitions
export interface RentalListing {
  id: string;
  type: string;
  bedrooms: number;
  bathrooms: number;
  size: number;
  rent: number;
  furnishing: 'Furnished' | 'Unfurnished' | 'Partially Furnished';
  availableSince: string;
  location: string;
  developer: string;
  amenities: string[];
  contactName: string;
  contactPhone: string;
  contactEmail: string;
  propertyAge: string;
  viewType: string;
  floorLevel: number;
  parkingSpaces: number;
  petFriendly: boolean;
  nearbyAttractions: string[];
  description: string;
  images: string[];
}

export interface RentalApiResponse {
  listings: RentalListing[];
  total: number;
  page: number;
  pageSize: number;
}

export interface RentalFilter {
  propertyType?: string;
  bedrooms?: string;
  sizeMin?: string;
  sizeMax?: string;
  rentMin?: string;
  rentMax?: string;
  furnishing?: string;
}

// Service for fetching real rental listings from Bayut and Property Finder
import axios from 'axios';

// Generate sample rental listings when API fails
const generateSampleRentalListings = (area: string, filters: RentalFilter = {}, page: number = 1, pageSize: number = 50): RentalListing[] => {
  const listings: RentalListing[] = [];
  const locations = [
    'Dubai Marina', 'Downtown Dubai', 'Palm Jumeirah', 'Business Bay',
    'Jumeirah Lake Towers', 'Dubai Hills Estate', 'Arabian Ranches'
  ];
  
  const propertyTypes = ['Apartment', 'Villa', 'Townhouse', 'Penthouse', 'Studio'];
  const furnishingOptions = ['Furnished', 'Unfurnished', 'Partially Furnished'];
  const developers = [
    'Emaar Properties', 'Damac Properties', 'Nakheel', 'Dubai Properties',
    'Meraas', 'Sobha Realty', 'Azizi Developments', 'Danube Properties'
  ];
  
  // Generate listings based on filters
  const count = Math.min(pageSize, 20); // Generate up to 20 listings per page
  
  for (let i = 0; i < count; i++) {
    // Apply filters if provided
    let bedroomCount = filters.bedrooms ? parseInt(filters.bedrooms, 10) || 1 : Math.floor(Math.random() * 5) + 1;
    let propertyType = filters.propertyType || propertyTypes[Math.floor(Math.random() * propertyTypes.length)];
    let furnishing = filters.furnishing as any || furnishingOptions[Math.floor(Math.random() * furnishingOptions.length)];
    
    // Determine rent based on location, property type, and bedrooms
    let baseRent = 0;
    switch (area) {
      case 'Dubai Marina':
        baseRent = 80000;
        break;
      case 'Downtown Dubai':
        baseRent = 120000;
        break;
      case 'Palm Jumeirah':
        baseRent = 150000;
        break;
      case 'Business Bay':
        baseRent = 90000;
        break;
      default:
        baseRent = 70000;
    }
    
    // Adjust rent based on property type
    if (propertyType === 'Villa') baseRent *= 2;
    if (propertyType === 'Penthouse') baseRent *= 1.8;
    if (propertyType === 'Townhouse') baseRent *= 1.5;
    if (propertyType === 'Studio') baseRent *= 0.7;
    
    // Adjust rent based on bedrooms
    baseRent *= (0.8 + (bedroomCount * 0.2));
    
    // Add some randomness
    baseRent = Math.round(baseRent * (0.9 + Math.random() * 0.2) / 1000) * 1000;
    
    // Size based on property type and bedrooms
    let size = 0;
    if (propertyType === 'Studio') {
      size = 400 + Math.floor(Math.random() * 200);
    } else {
      size = 800 + (bedroomCount * 400) + Math.floor(Math.random() * 300);
      if (propertyType === 'Villa' || propertyType === 'Townhouse') {
        size *= 1.5;
      }
    }
    
    // Generate a unique ID
    const id = `rental-${area.toLowerCase().replace(/\s+/g, '-')}-${i}-${Date.now().toString().slice(-4)}`;
    
    // Create the listing
    listings.push({
      id,
      type: propertyType,
      bedrooms: bedroomCount,
      bathrooms: bedroomCount + (Math.random() > 0.7 ? 1 : 0),
      size,
      rent: baseRent,
      furnishing,
      availableSince: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString(),
      location: area || locations[Math.floor(Math.random() * locations.length)],
      developer: developers[Math.floor(Math.random() * developers.length)],
      amenities: [
        'Swimming Pool',
        'Gym',
        'Parking',
        'Security',
        'Balcony',
        'Central AC',
        'Concierge Service',
        'Children\'s Play Area'
      ].slice(0, Math.floor(Math.random() * 6) + 3),
      contactName: 'Dubai Real Estate Agent',
      contactPhone: '+971-5X-XXX-XXXX',
      contactEmail: 'agent@dubaiproperties.example',
      propertyAge: `${Math.floor(Math.random() * 10) + 1} years`,
      viewType: ['Sea View', 'City View', 'Garden View', 'Pool View'][Math.floor(Math.random() * 4)],
      floorLevel: Math.floor(Math.random() * 40) + 1,
      parkingSpaces: Math.floor(Math.random() * 3) + 1,
      petFriendly: Math.random() > 0.5,
      nearbyAttractions: [
        'Dubai Mall',
        'Burj Khalifa',
        'Dubai Marina Walk',
        'JBR Beach',
        'Mall of the Emirates',
        'Dubai Opera'
      ].slice(0, Math.floor(Math.random() * 4) + 1),
      description: `Beautiful ${bedroomCount} bedroom ${propertyType.toLowerCase()} in ${area}. ${furnishing} with amazing amenities and views.`,
      images: Array(Math.floor(Math.random() * 5) + 3).fill('https://via.placeholder.com/800x600?text=Dubai+Property')
    });
  }
  
  return listings;
};

const rentalApiService = {
  // Get rental listings from Bayut and Property Finder APIs
  getRentalListings: async (
    area: string,
    filters: RentalFilter = {},
    page: number = 1,
    pageSize: number = 50
  ): Promise<RentalApiResponse> => {
    try {
      // Fetch from Bayut
      const bayutRes = await axios.get('https://bayut.p.rapidapi.com/properties/list', {
        params: {
          locationExternalIDs: area,
          purpose: 'for-rent',
          hitsPerPage: pageSize,
          page: page,
          ...filters
        },
        headers: {
          'X-RapidAPI-Key': process.env.NEXT_PUBLIC_BAYUT_API_KEY || 'your-api-key',
          'X-RapidAPI-Host': 'bayut.p.rapidapi.com'
        }
      });
      // Fetch from Property Finder (pseudo API, as PF does not have a free public API)
      // In production, use a backend scraper or an official API if available
      let pfListings: any[] = [];
      try {
        const pfRes = await axios.get('https://api.propertyfinder.ae/v1/properties', {
          params: {
            location: area,
            purpose: 'for-rent',
            ...filters,
            page,
            per_page: pageSize
          },
          headers: {
            'Authorization': `Bearer ${process.env.NEXT_PUBLIC_PROPERTYFINDER_API_KEY || 'your-api-key'}`
          }
        });
        pfListings = pfRes.data?.listings || [];
      } catch (e) {
        pfListings = [];
      }
      // Combine, deduplicate, and format listings
      const allListings = [...(bayutRes.data?.hits || []), ...pfListings].map(listing => {
        // Use the most precise price and sqft
        let price = listing.price || listing.rent || 0;
        let size = listing.size || listing.sqft || 0;
        // Compose contact or fallback link
        let contactName = listing.contactName || '';
        let contactPhone = listing.contactPhone || '';
        let contactEmail = listing.contactEmail || '';
        let link = listing.externalLink || listing.url || listing.detailUrl || '';
        if (!contactPhone && link) {
          contactPhone = link; // Use the link if no contact
        }
        return {
          id: listing.id || listing.referenceNumber || '',
          type: listing.type || listing.propertyType || '',
          bedrooms: listing.bedrooms || 0,
          bathrooms: listing.bathrooms || 0,
          size,
          rent: price,
          furnishing: listing.furnishingStatus || 'Unknown',
          availableSince: listing.createdAt || '',
          location: listing.location || area,
          developer: listing.developer || '',
          amenities: listing.amenities || [],
          contactName,
          contactPhone,
          contactEmail,
          propertyAge: listing.propertyAge || '',
          viewType: listing.viewType || '',
          floorLevel: listing.floorNumber || 0,
          parkingSpaces: listing.parkingSpaces || 0,
          petFriendly: !!listing.petFriendly,
          nearbyAttractions: listing.nearbyAttractions || [],
          description: listing.description || '',
          images: listing.images || [],
          link // always include the direct link
        };
      });
      // Paginate
      const paginatedListings = allListings.slice(0, pageSize);
      return {
        listings: paginatedListings,
        total: allListings.length,
        page,
        pageSize
      };
    } catch (error) {
      console.error('Error fetching rental listings:', error);
      // If API fails, generate some sample data to ensure UI still works
      const sampleListings = generateSampleRentalListings(area, filters, page, pageSize);
      return { 
        listings: sampleListings, 
        total: sampleListings.length, 
        page, 
        pageSize 
      };
    }
  },
  
  // Check for new listings since the last fetch
  checkForNewListings: async (area: string, lastFetchTime: number): Promise<number> => {
    // In production, this would call your backend API to check for new listings
    // Example: 
    // const response = await fetch('/api/check-new-listings', {
    //   method: 'POST',
    //   body: JSON.stringify({ area, lastFetchTime })
    // });
    // return response.json().then(data => data.count);
    
    // For now, return a random number of new listings
    return Math.floor(Math.random() * 5);
  }
};

export default rentalApiService;
