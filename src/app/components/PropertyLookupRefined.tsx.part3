  
  // Reset chart zoom
  const resetChartZoom = () => {
    setChartZoom(null);
  };
  
  // Toggle developer details expansion
  const toggleDeveloperDetails = () => {
    setDeveloperDetailsExpanded(!developerDetailsExpanded);
  };

  // Toggle filters visibility
  const toggleFilters = () => {
    setFiltersExpanded(!filtersExpanded);
  };

  // Update price estimate when filters change
  useEffect(() => {
    const updatePriceEstimate = async () => {
      if (location && propertyType && bedrooms) {
        setFetchingPrice(true);
        try {
          const criteria: PropertySearchCriteria = {
            location,
            propertyType,
            bedrooms: bedrooms === 'Studio' ? 0 : parseInt(bedrooms, 10)
          };

          const response = await getPropertyInfo(criteria);
          
          if (response.success && response.data) {
            // Extract price range from the response - this is a simplification
            // In a real implementation, you would need to parse the AI response more carefully
            const priceMatch = response.data.match(/AED\s*([\d,]+)\s*-\s*AED\s*([\d,]+)/i);
            if (priceMatch) {
              setPriceEstimate(`${priceMatch[1]} - ${priceMatch[2]} AED`);
            } else {
              setPriceEstimate('Price estimate available upon search');
            }
          } else {
            setPriceEstimate('Price estimate available upon search');
          }
        } catch (err) {
          console.error('Error fetching price estimate:', err);
          setPriceEstimate('Price estimate available upon search');
        } finally {
          setFetchingPrice(false);
        }
      } else {
        setPriceEstimate('');
      }
    };

    updatePriceEstimate();
  }, [location, propertyType, bedrooms]);

  return (
    <div className="min-h-screen bg-anti-flash-white">
      <header className="bg-white shadow-sm border-b border-almond p-4">
        <div className="container mx-auto">
          <div className="flex items-center">
            <Link href="/" className="mr-4 text-tuscany hover:text-tuscany/70 transition-colors">
              <FaArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-2xl font-bold text-dubai-blue-900">Property Lookup</h1>
          </div>
        </div>
      </header>
      
      <main className="container mx-auto px-4 py-6">
        {/* Search Bar and Filters */}
        <div className="mb-6">
          <form onSubmit={handleSearch}>
            <div className="flex flex-col gap-4 bg-white p-4 rounded-lg shadow-sm">
              {/* Search Input */}
              <div className="relative">
                <input
                  type="text"
                  className="w-full p-3 pl-10 bg-white border border-almond rounded-lg focus:outline-none focus:ring-1 focus:ring-tuscany"
                  placeholder="Enter property name or ID"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  disabled={loading}
                  list="property-suggestions"
                />
                <datalist id="property-suggestions">
                  <option value="Marina Towers" />
                  <option value="Burj Residences" />
                  <option value="Palm Jumeirah Villa" />
                  <option value="Downtown Lofts" />
                  <option value="Business Bay Apartment" />
                  <option value="Dubai Hills Estate" />
                  <option value="Dubai Marina Penthouse" />
                  <option value="Emirates Hills Villa" />
                </datalist>
                <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-tuscany" />
              </div>

              {/* Filter Toggle Button */}
              <div className="flex justify-between items-center">
                <button
                  type="button"
                  onClick={toggleFilters}
                  className="flex items-center gap-2 text-dubai-blue-900 hover:text-tuscany transition-colors"
                >
                  <FaFilter className="h-4 w-4" />
                  <span>{filtersExpanded ? "Hide Filters" : "Show Filters"}</span>
                </button>

                {priceEstimate && (
                  <div className="text-dubai-blue-900 flex items-center gap-2">
                    <FaTag className="h-4 w-4 text-tuscany" />
                    <span className="font-medium">
                      {fetchingPrice ? (
                        <span className="flex items-center gap-2">
                          <FaSpinner className="animate-spin h-4 w-4" /> 
                          Calculating...
                        </span>
                      ) : (
                        priceEstimate
                      )}
                    </span>
                  </div>
                )}
              </div>

              {/* Expanded Filters */}
              {filtersExpanded && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-almond/10 rounded-lg">
                  {/* Location Filter */}
                  <div>
                    <label className="block text-sm font-medium text-dubai-blue-900 mb-1">
                      Location
                    </label>
                    <select
                      className="w-full p-2 border border-almond rounded-lg focus:outline-none focus:ring-1 focus:ring-tuscany bg-white"
                      value={location}
                      onChange={(e) => setLocation(e.target.value)}
                      disabled={loading}
                    >
                      <option value="">Select Location</option>
                      {dubaiLocations.map((loc) => (
                        <option key={loc} value={loc}>
                          {loc}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Property Type Filter */}
                  <div>
                    <label className="block text-sm font-medium text-dubai-blue-900 mb-1">
                      Property Type
                    </label>
                    <select
                      className="w-full p-2 border border-almond rounded-lg focus:outline-none focus:ring-1 focus:ring-tuscany bg-white"
                      value={propertyType}
                      onChange={(e) => setPropertyType(e.target.value)}
                      disabled={loading}
                    >
                      <option value="">Select Type</option>
                      {propertyTypes.map((type) => (
                        <option key={type} value={type}>
                          {type}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Bedrooms Filter */}
                  <div>
                    <label className="block text-sm font-medium text-dubai-blue-900 mb-1">
                      Bedrooms
                    </label>
                    <select
                      className="w-full p-2 border border-almond rounded-lg focus:outline-none focus:ring-1 focus:ring-tuscany bg-white"
                      value={bedrooms}
                      onChange={(e) => setBedrooms(e.target.value)}
                      disabled={loading}
                    >
                      <option value="">Select Bedrooms</option>
                      {bedroomOptions.map((option) => (
                        <option key={option} value={option}>
                          {option}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              {/* Search Button */}
              <button
                type="submit"
                className="bg-tuscany hover:bg-tuscany/90 text-white py-3 rounded-lg font-medium transition-colors flex items-center justify-center"
                disabled={loading}
              >
                {loading ? (
                  <span className="flex items-center gap-2">
                    <FaSpinner className="animate-spin" /> Searching...
                  </span>
                ) : (
                  "Search Property"
                )}
              </button>
            </div>
          </form>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg">
            {error}
          </div>
        )}
